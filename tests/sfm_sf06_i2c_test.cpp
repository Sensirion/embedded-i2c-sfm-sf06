/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 0.37.0
 * Product:       sfm_sf06
 * Model-Version: 1.5.0
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include "sfm_sf06_i2c.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

void print_byte_array(uint8_t* array, uint16_t len) {
    uint16_t i = 0;
    printf("0x");
    for (; i < len; i++) {
        printf("%02x", array[i]);
    }
}

TEST_GROUP (SFM_SF06_Tests) {
    void setup() {
        sfm_sf06_init(0x2A);
    }
};

TEST (SFM_SF06_Tests, test_configure_averaging1) {
    int16_t local_error = 0;
    local_error = sfm_sf06_configure_averaging(50);
    CHECK_EQUAL_ZERO_TEXT(local_error, "configure_averaging");
}

TEST (SFM_SF06_Tests, test_read_product_identifier1) {
    int16_t local_error = 0;
    uint32_t product_identifier = 0;
    uint8_t serial_number[8] = {0};
    local_error =
        sfm_sf06_read_product_identifier(&product_identifier, serial_number, 8);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_product_identifier");
    printf("product_identifier: %u ", product_identifier);
    printf("serial_number: ");
    print_byte_array(serial_number, 8);
    printf("\n");
}

TEST (SFM_SF06_Tests, test_enter_sleep1) {
    int16_t local_error = 0;
    local_error = sfm_sf06_enter_sleep();
    CHECK_EQUAL_ZERO_TEXT(local_error, "enter_sleep");
    local_error = sfm_sf06_exit_sleep();
    CHECK_EQUAL_ZERO_TEXT(local_error, "exit_sleep");
}

TEST (SFM_SF06_Tests, test_start_O2_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t temperature = 0;
    uint16_t status_word = 0u;
    local_error = sfm_sf06_start_o2_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_O2_continuous_measurement");
    local_error =
        sfm_sf06_read_measurement_data(&flow, &temperature, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data");
    printf("flow: %i ", flow);
    printf("temperature: %i ", temperature);
    printf("status_word: %02x\n", status_word);
    local_error = sfm_sf06_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SFM_SF06_Tests, test_start_Air_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t temperature = 0;
    uint16_t status_word = 0u;
    local_error = sfm_sf06_start_air_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_Air_continuous_measurement");
    local_error =
        sfm_sf06_read_measurement_data(&flow, &temperature, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data");
    printf("flow: %i ", flow);
    printf("temperature: %i ", temperature);
    printf("status_word: %02x\n", status_word);
    local_error = sfm_sf06_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SFM_SF06_Tests, test_start_N2O_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t temperature = 0;
    uint16_t status_word = 0u;
    local_error = sfm_sf06_start_n2o_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_N2O_continuous_measurement");
    local_error =
        sfm_sf06_read_measurement_data(&flow, &temperature, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data");
    printf("flow: %i ", flow);
    printf("temperature: %i ", temperature);
    printf("status_word: %02x\n", status_word);
    local_error = sfm_sf06_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SFM_SF06_Tests, test_start_CO2_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t temperature = 0;
    uint16_t status_word = 0u;
    local_error = sfm_sf06_start_co2_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_CO2_continuous_measurement");
    local_error =
        sfm_sf06_read_measurement_data(&flow, &temperature, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data");
    printf("flow: %i ", flow);
    printf("temperature: %i ", temperature);
    printf("status_word: %02x\n", status_word);
    local_error = sfm_sf06_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SFM_SF06_Tests, test_start_N2O_O2_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t temperature = 0;
    uint16_t status_word = 0u;
    local_error = sfm_sf06_start_n2o_o2_continuous_measurement(50);
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_N2O_O2_continuous_measurement");
    local_error =
        sfm_sf06_read_measurement_data(&flow, &temperature, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data");
    printf("flow: %i ", flow);
    printf("temperature: %i ", temperature);
    printf("status_word: %02x\n", status_word);
    local_error = sfm_sf06_update_concentration(50);
    CHECK_EQUAL_ZERO_TEXT(local_error, "update_concentration");
    local_error = sfm_sf06_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SFM_SF06_Tests, test_start_Air_O2_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t temperature = 0;
    uint16_t status_word = 0u;
    local_error = sfm_sf06_start_air_o2_continuous_measurement(50);
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_Air_O2_continuous_measurement");
    local_error =
        sfm_sf06_read_measurement_data(&flow, &temperature, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data");
    printf("flow: %i ", flow);
    printf("temperature: %i ", temperature);
    printf("status_word: %02x\n", status_word);
    local_error = sfm_sf06_update_concentration(50);
    CHECK_EQUAL_ZERO_TEXT(local_error, "update_concentration");
    local_error = sfm_sf06_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SFM_SF06_Tests, test_start_CO2_O2_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t temperature = 0;
    uint16_t status_word = 0u;
    local_error = sfm_sf06_start_co2_o2_continuous_measurement(50);
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_CO2_O2_continuous_measurement");
    local_error =
        sfm_sf06_read_measurement_data(&flow, &temperature, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data");
    printf("flow: %i ", flow);
    printf("temperature: %i ", temperature);
    printf("status_word: %02x\n", status_word);
    local_error = sfm_sf06_update_concentration(50);
    CHECK_EQUAL_ZERO_TEXT(local_error, "update_concentration");
    local_error = sfm_sf06_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}
