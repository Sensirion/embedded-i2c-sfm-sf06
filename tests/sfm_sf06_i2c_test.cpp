/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * I2C-Generator: 0.3.0
 * Yaml Version: 1.1.0
 * Template Version: 0.7.0-80-gf4d3b1b
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "i2c_mux.h"
#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include "sfm_sf06_i2c.h"
#include <inttypes.h>
#include <stdio.h>

TEST_GROUP (SFM_SF06_Tests) {
    void setup() {
        sensirion_i2c_hal_init();
        int16_t error = sensirion_i2c_mux_set_single_channel(0x71, 1);
        CHECK_EQUAL_ZERO_TEXT(error, "sensirion_i2c_mux_set_single_channel")
        init_driver(
            ADDR_SFM4300_A);  // only with sfm4300 all tests can be executed!
    }

    void teardown() {

        sensirion_i2c_hal_free();
    }
};

TEST (SFM_SF06_Tests, SFM_SF06_Test_start_o2_continuous_measurement) {
    int16_t error;
    error = sfm_sf06_start_o2_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(error, "sfm_sf06_start_o2_continuous_measurement");
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_start_air_continuous_measurement) {
    int16_t error;
    error = sfm_sf06_start_air_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(error, "sfm_sf06_start_air_continuous_measurement");
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_start_n2o_continuous_measurement) {
    int16_t error;
    error = sfm_sf06_start_n2o_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(error, "sfm_sf06_start_n2o_continuous_measurement");
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_start_co2_continuous_measurement) {
    int16_t error;
    error = sfm_sf06_start_co2_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(error, "sfm_sf06_start_co2_continuous_measurement");
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_start_air_o2_continuous_measurement) {
    int16_t error;
    uint16_t volume_fraction = 0;
    error = sfm_sf06_start_air_o2_continuous_measurement(volume_fraction);
    CHECK_EQUAL_ZERO_TEXT(error,
                          "sfm_sf06_start_air_o2_continuous_measurement");
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_start_no2_o2_continuous_measurement) {
    int16_t error;
    uint16_t volume_fraction = 0;
    error = sfm_sf06_start_no2_o2_continuous_measurement(volume_fraction);
    CHECK_EQUAL_ZERO_TEXT(error,
                          "sfm_sf06_start_no2_o2_continuous_measurement");
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_start_c02_02_continuous_measurement) {
    int16_t error;
    uint16_t volume_fraction = 0;
    error = sfm_sf06_start_c02_02_continuous_measurement(volume_fraction);
    CHECK_EQUAL_ZERO_TEXT(error,
                          "sfm_sf06_start_c02_02_continuous_measurement");
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_read_measurement_data) {
    int16_t error;
    int16_t flow;
    int16_t temperature;
    uint16_t status_word;
    error = sfm_sf06_read_measurement_data(&flow, &temperature, &status_word);
    CHECK_EQUAL_ZERO_TEXT(error, "sfm_sf06_read_measurement_data");
    printf("Flow: %i\n", flow);
    printf("Temperature: %i\n", temperature);
    printf("Status word: %u\n", status_word);
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_update_concentration_set) {
    int16_t error;
    uint16_t volume_fraction = 0;
    error = sfm_sf06_update_concentration_set(volume_fraction);
    CHECK_EQUAL_ZERO_TEXT(error, "sfm_sf06_update_concentration_set");
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_update_concentration_activate) {
    int16_t error;
    error = sfm_sf06_update_concentration_activate();
    CHECK_EQUAL_ZERO_TEXT(error, "sfm_sf06_update_concentration_activate");
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_stop_continuous_measurement) {
    int16_t error;
    error = sfm_sf06_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(error, "sfm_sf06_stop_continuous_measurement");
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_configure_averaging) {
    int16_t error;
    uint16_t average_window = 0;
    error = sfm_sf06_configure_averaging(average_window);
    CHECK_EQUAL_ZERO_TEXT(error, "sfm_sf06_configure_averaging");
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_read_scale_offset_unit) {
    int16_t error;
    uint16_t command_code = 0;
    int16_t flow_scale_factor;
    int16_t flow_offset;
    uint16_t flow_unit;
    error = sfm_sf06_read_scale_offset_unit(command_code, &flow_scale_factor,
                                            &flow_offset, &flow_unit);
    CHECK_EQUAL_ZERO_TEXT(error, "sfm_sf06_read_scale_offset_unit");
    printf("Flow scale factor: %i\n", flow_scale_factor);
    printf("Flow offset: %i\n", flow_offset);
    printf("Flow unit: %u\n", flow_unit);
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_enter_sleep) {
    int16_t error;
    error = sfm_sf06_enter_sleep();
    CHECK_EQUAL_ZERO_TEXT(error, "sfm_sf06_enter_sleep");
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_exit_sleep) {
    int16_t error;
    error = sfm_sf06_exit_sleep();
    CHECK_EQUAL_ZERO_TEXT(error, "sfm_sf06_exit_sleep");
}

TEST (SFM_SF06_Tests, SFM_SF06_Test_read_product_identifier) {
    int16_t error;
    uint32_t product_identifier;
    uint8_t serial_number[42];
    uint8_t serial_number_size = 42;
    error = sfm_sf06_read_product_identifier(
        &product_identifier, &serial_number[0], serial_number_size);
    CHECK_EQUAL_ZERO_TEXT(error, "sfm_sf06_read_product_identifier");
    printf("Product identifier: %u\n", product_identifier);
    printf("Serial number: ");
    for (size_t i = 0; i < serial_number_size; i++) {
        printf("%u, ", serial_number[i]);
    }
    printf("\n");
}
